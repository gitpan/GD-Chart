# This file was automatically generated by SWIG
package GD::Chart;
require Exporter;
require DynaLoader;
@ISA = qw(Exporter DynaLoader);
package GD::Chartc;
bootstrap GD::Chart;
package GD::Chart;
@EXPORT = qw( );
$VERSION = 0.05;

# ---------- BASE METHODS -------------

package GD::Chart;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}

sub new {
	shift;
	return GD::Chart::gdchart->new(@_);
}


# ------- FUNCTION WRAPPERS --------

package GD::Chart;

*GDC_out_graph = *GD::Chartc::GDC_out_graph;
*GDC_destroy_image = *GD::Chartc::GDC_destroy_image;
*out_err = *GD::Chartc::out_err;

############# Class : GD::Chart::note ##############

package GD::Chart::note;
@ISA = qw( GD::Chart );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = GD::Chartc::new_note(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        GD::Chartc::delete_note($self);
        delete $OWNER{$self};
    }
}

*setnote = *GD::Chartc::note_setnote;
*col = *GD::Chartc::note_col;
*point = *GD::Chartc::note_point;
*font = *GD::Chartc::note_font;
*tt_font = *GD::Chartc::note_tt_font;
*tt_font_size = *GD::Chartc::note_tt_font_size;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : GD::Chart::scatter ##############

package GD::Chart::scatter;
@ISA = qw( GD::Chart );
%OWNER = ();
%ITERATORS = ();
*swig_s_get = *GD::Chartc::scatter_s_get;
*swig_s_set = *GD::Chartc::scatter_s_set;
*swig_num_get = *GD::Chartc::scatter_num_get;
*swig_num_set = *GD::Chartc::scatter_num_set;
*swig_set_get = *GD::Chartc::scatter_set_get;
*swig_set_set = *GD::Chartc::scatter_set_set;
sub new {
    my $pkg = shift;
    my $self = GD::Chartc::new_scatter(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        GD::Chartc::delete_scatter($self);
        delete $OWNER{$self};
    }
}

*add = *GD::Chartc::scatter_add;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : GD::Chart::gdchart ##############

package GD::Chart::gdchart;
@ISA = qw( GD::Chart );
%OWNER = ();
%ITERATORS = ();
*swig_w_get = *GD::Chartc::gdchart_w_get;
*swig_w_set = *GD::Chartc::gdchart_w_set;
*swig_h_get = *GD::Chartc::gdchart_h_get;
*swig_h_set = *GD::Chartc::gdchart_h_set;
*swig_s_get = *GD::Chartc::gdchart_s_get;
*swig_s_set = *GD::Chartc::gdchart_s_set;
*swig_p_get = *GD::Chartc::gdchart_p_get;
*swig_p_set = *GD::Chartc::gdchart_p_set;
*swig_flags_get = *GD::Chartc::gdchart_flags_get;
*swig_flags_set = *GD::Chartc::gdchart_flags_set;
*swig_cols_get = *GD::Chartc::gdchart_cols_get;
*swig_cols_set = *GD::Chartc::gdchart_cols_set;
*swig_labels_get = *GD::Chartc::gdchart_labels_get;
*swig_labels_set = *GD::Chartc::gdchart_labels_set;
*swig_labels_num_get = *GD::Chartc::gdchart_labels_num_get;
*swig_labels_num_set = *GD::Chartc::gdchart_labels_num_set;
*swig_plotcolour_get = *GD::Chartc::gdchart_plotcolour_get;
*swig_plotcolour_set = *GD::Chartc::gdchart_plotcolour_set;
*swig_linecolour_get = *GD::Chartc::gdchart_linecolour_get;
*swig_linecolour_set = *GD::Chartc::gdchart_linecolour_set;
*swig_angle_3d_get = *GD::Chartc::gdchart_angle_3d_get;
*swig_angle_3d_set = *GD::Chartc::gdchart_angle_3d_set;
*swig_depth_3d_get = *GD::Chartc::gdchart_depth_3d_get;
*swig_depth_3d_set = *GD::Chartc::gdchart_depth_3d_set;
*swig_title_size_get = *GD::Chartc::gdchart_title_size_get;
*swig_title_size_set = *GD::Chartc::gdchart_title_size_set;
*swig_data_get = *GD::Chartc::gdchart_data_get;
*swig_data_set = *GD::Chartc::gdchart_data_set;
*swig_vol_get = *GD::Chartc::gdchart_vol_get;
*swig_vol_set = *GD::Chartc::gdchart_vol_set;
*swig_output_get = *GD::Chartc::gdchart_output_get;
*swig_output_set = *GD::Chartc::gdchart_output_set;
*swig_bgcolour_get = *GD::Chartc::gdchart_bgcolour_get;
*swig_bgcolour_set = *GD::Chartc::gdchart_bgcolour_set;
*swig_type_get = *GD::Chartc::gdchart_type_get;
*swig_type_set = *GD::Chartc::gdchart_type_set;
*swig_img_get = *GD::Chartc::gdchart_img_get;
*swig_img_set = *GD::Chartc::gdchart_img_set;
sub new {
    my $pkg = shift;
    my $self = GD::Chartc::new_gdchart(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        GD::Chartc::delete_gdchart($self);
        delete $OWNER{$self};
    }
}

*options = *GD::Chartc::gdchart_options;
*scatter = *GD::Chartc::gdchart_scatter;
*note = *GD::Chartc::gdchart_note;
*ytitle = *GD::Chartc::gdchart_ytitle;
*xtitle = *GD::Chartc::gdchart_xtitle;
*ytitle2 = *GD::Chartc::gdchart_ytitle2;
*title = *GD::Chartc::gdchart_title;
*ytitle_size = *GD::Chartc::gdchart_ytitle_size;
*xtitle_size = *GD::Chartc::gdchart_xtitle_size;
*yaxisfont_size = *GD::Chartc::gdchart_yaxisfont_size;
*xaxisfont_size = *GD::Chartc::gdchart_xaxisfont_size;
*title_tt_font = *GD::Chartc::gdchart_title_tt_font;
*ytitle_tt_font = *GD::Chartc::gdchart_ytitle_tt_font;
*xtitle_tt_font = *GD::Chartc::gdchart_xtitle_tt_font;
*yaxis_tt_font = *GD::Chartc::gdchart_yaxis_tt_font;
*xaxis_tt_font = *GD::Chartc::gdchart_xaxis_tt_font;
*title_ptsize = *GD::Chartc::gdchart_title_ptsize;
*ytitle_ptsize = *GD::Chartc::gdchart_ytitle_ptsize;
*xtitle_ptsize = *GD::Chartc::gdchart_xtitle_ptsize;
*yaxis_ptsize = *GD::Chartc::gdchart_yaxis_ptsize;
*xaxis_ptsize = *GD::Chartc::gdchart_xaxis_ptsize;
*xaxis_angle = *GD::Chartc::gdchart_xaxis_angle;
*ylabel_fmt = *GD::Chartc::gdchart_ylabel_fmt;
*ylabel2_fmt = *GD::Chartc::gdchart_ylabel2_fmt;
*xlabel_ctl = *GD::Chartc::gdchart_xlabel_ctl;
*xlabel_spacing = *GD::Chartc::gdchart_xlabel_spacing;
*ylabel_density = *GD::Chartc::gdchart_ylabel_density;
*interpolations = *GD::Chartc::gdchart_interpolations;
*requested_ymin = *GD::Chartc::gdchart_requested_ymin;
*requested_ymax = *GD::Chartc::gdchart_requested_ymax;
*requested_yinterval = *GD::Chartc::gdchart_requested_yinterval;
*shelf = *GD::Chartc::gdchart_shelf;
*grid = *GD::Chartc::gdchart_grid;
*ticks = *GD::Chartc::gdchart_ticks;
*xaxis = *GD::Chartc::gdchart_xaxis;
*yaxis = *GD::Chartc::gdchart_yaxis;
*yaxis2 = *GD::Chartc::gdchart_yaxis2;
*yval_style = *GD::Chartc::gdchart_yval_style;
*stack_type = *GD::Chartc::gdchart_stack_type;
*bar_width = *GD::Chartc::gdchart_bar_width;
*hlc_style = *GD::Chartc::gdchart_hlc_style;
*hlc_cap_width = *GD::Chartc::gdchart_hlc_cap_width;
*annotation_font_size = *GD::Chartc::gdchart_annotation_font_size;
*annotation_font = *GD::Chartc::gdchart_annotation_font;
*annotation_font_ptsize = *GD::Chartc::gdchart_annotation_font_ptsize;
*num_scatter_pts = *GD::Chartc::gdchart_num_scatter_pts;
*thumbnail = *GD::Chartc::gdchart_thumbnail;
*thumblabel = *GD::Chartc::gdchart_thumblabel;
*thumbval = *GD::Chartc::gdchart_thumbval;
*border = *GD::Chartc::gdchart_border;
*linecolor = *GD::Chartc::gdchart_linecolor;
*plotcolor = *GD::Chartc::gdchart_plotcolor;
*edgecolor = *GD::Chartc::gdchart_edgecolor;
*edgecolour = *GD::Chartc::gdchart_edgecolour;
*other_threshold = *GD::Chartc::gdchart_other_threshold;
*volcolor = *GD::Chartc::gdchart_volcolor;
*volcolour = *GD::Chartc::gdchart_volcolour;
*titlecolor = *GD::Chartc::gdchart_titlecolor;
*titlecolour = *GD::Chartc::gdchart_titlecolour;
*xtitlecolor = *GD::Chartc::gdchart_xtitlecolor;
*xtitlecolour = *GD::Chartc::gdchart_xtitlecolour;
*ytitlecolor = *GD::Chartc::gdchart_ytitlecolor;
*ytitlecolour = *GD::Chartc::gdchart_ytitlecolour;
*ytitle2color = *GD::Chartc::gdchart_ytitle2color;
*ytitle2colour = *GD::Chartc::gdchart_ytitle2colour;
*xlabelcolor = *GD::Chartc::gdchart_xlabelcolor;
*xlabelcolour = *GD::Chartc::gdchart_xlabelcolour;
*ylabelcolor = *GD::Chartc::gdchart_ylabelcolor;
*ylabelcolour = *GD::Chartc::gdchart_ylabelcolour;
*ylabel2color = *GD::Chartc::gdchart_ylabel2color;
*ylabel2colour = *GD::Chartc::gdchart_ylabel2colour;
*extvolcolor = *GD::Chartc::gdchart_extvolcolor;
*extvolcolour = *GD::Chartc::gdchart_extvolcolour;
*setcolor = *GD::Chartc::gdchart_setcolor;
*setcolour = *GD::Chartc::gdchart_setcolour;
*color = *GD::Chartc::gdchart_color;
*colors = *GD::Chartc::gdchart_colors;
*colour = *GD::Chartc::gdchart_colour;
*colours = *GD::Chartc::gdchart_colours;
*extcolor = *GD::Chartc::gdchart_extcolor;
*extcolour = *GD::Chartc::gdchart_extcolour;
*transparent_bg = *GD::Chartc::gdchart_transparent_bg;
*bgimage = *GD::Chartc::gdchart_bgimage;
*label_size = *GD::Chartc::gdchart_label_size;
*label_font = *GD::Chartc::gdchart_label_font;
*label_font_ptsize = *GD::Chartc::gdchart_label_font_ptsize;
*label_dist = *GD::Chartc::gdchart_label_dist;
*label_line = *GD::Chartc::gdchart_label_line;
*explode = *GD::Chartc::gdchart_explode;
*missing = *GD::Chartc::gdchart_missing;
*percent_labels = *GD::Chartc::gdchart_percent_labels;
*percent_fmt = *GD::Chartc::gdchart_percent_fmt;
*height = *GD::Chartc::gdchart_height;
*width = *GD::Chartc::gdchart_width;
*chart_type = *GD::Chartc::gdchart_chart_type;
*pie_type = *GD::Chartc::gdchart_pie_type;
*imgtype = *GD::Chartc::gdchart_imgtype;
*sets = *GD::Chartc::gdchart_sets;
*points = *GD::Chartc::gdchart_points;
*bgcolor = *GD::Chartc::gdchart_bgcolor;
*fd = *GD::Chartc::gdchart_fd;
*filename = *GD::Chartc::gdchart_filename;
*draw = *GD::Chartc::gdchart_draw;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : GD::Chart::gdchart_img ##############

package GD::Chart::gdchart_img;
@ISA = qw( GD::Chart );
%OWNER = ();
%ITERATORS = ();
*swig_chart_get = *GD::Chartc::gdchart_img_chart_get;
*swig_chart_set = *GD::Chartc::gdchart_img_chart_set;
*swig_pie_get = *GD::Chartc::gdchart_img_pie_get;
*swig_pie_set = *GD::Chartc::gdchart_img_pie_set;
sub new {
    my $pkg = shift;
    my $self = GD::Chartc::new_gdchart_img(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        GD::Chartc::delete_gdchart_img($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package GD::Chart;

*FALSE = *GD::Chartc::FALSE;
*TRUE = *GD::Chartc::TRUE;
*GDC_NOVALUE = *GD::Chartc::GDC_NOVALUE;
*GDC_NULL = *GD::Chartc::GDC_NULL;
*GDC_NOCOLOR = *GD::Chartc::GDC_NOCOLOR;
*GDC_DFLTCOLOR = *GD::Chartc::GDC_DFLTCOLOR;
*PVRED = *GD::Chartc::PVRED;
*PVGRN = *GD::Chartc::PVGRN;
*PVBLU = *GD::Chartc::PVBLU;
*CHART = *GD::Chartc::CHART;
*PIE = *GD::Chartc::PIE;
*GDC_pad = *GD::Chartc::GDC_pad;
*GDC_TINY = *GD::Chartc::GDC_TINY;
*GDC_SMALL = *GD::Chartc::GDC_SMALL;
*GDC_MEDBOLD = *GD::Chartc::GDC_MEDBOLD;
*GDC_LARGE = *GD::Chartc::GDC_LARGE;
*GDC_GIANT = *GD::Chartc::GDC_GIANT;
*GDC_numfonts = *GD::Chartc::GDC_numfonts;
*GDC_STACK_DEPTH = *GD::Chartc::GDC_STACK_DEPTH;
*GDC_STACK_SUM = *GD::Chartc::GDC_STACK_SUM;
*GDC_STACK_BESIDE = *GD::Chartc::GDC_STACK_BESIDE;
*GDC_STACK_LAYER = *GD::Chartc::GDC_STACK_LAYER;
*GDC_HLC_DIAMOND = *GD::Chartc::GDC_HLC_DIAMOND;
*GDC_HLC_CLOSE_CONNECTED = *GD::Chartc::GDC_HLC_CLOSE_CONNECTED;
*GDC_HLC_CONNECTING = *GD::Chartc::GDC_HLC_CONNECTING;
*GDC_HLC_I_CAP = *GD::Chartc::GDC_HLC_I_CAP;
*GDC_SCATTER_TRIANGLE_DOWN = *GD::Chartc::GDC_SCATTER_TRIANGLE_DOWN;
*GDC_SCATTER_TRIANGLE_UP = *GD::Chartc::GDC_SCATTER_TRIANGLE_UP;
*GDC_SCATTER_CIRCLE = *GD::Chartc::GDC_SCATTER_CIRCLE;
*GDC_TICK_LABELS = *GD::Chartc::GDC_TICK_LABELS;
*GDC_TICK_POINTS = *GD::Chartc::GDC_TICK_POINTS;
*GDC_TICK_NONE = *GD::Chartc::GDC_TICK_NONE;
*GDC_BORDER_NONE = *GD::Chartc::GDC_BORDER_NONE;
*GDC_BORDER_ALL = *GD::Chartc::GDC_BORDER_ALL;
*GDC_BORDER_X = *GD::Chartc::GDC_BORDER_X;
*GDC_BORDER_Y = *GD::Chartc::GDC_BORDER_Y;
*GDC_BORDER_Y2 = *GD::Chartc::GDC_BORDER_Y2;
*GDC_BORDER_TOP = *GD::Chartc::GDC_BORDER_TOP;
*GDC_3DPIE = *GD::Chartc::GDC_3DPIE;
*GDC_2DPIE = *GD::Chartc::GDC_2DPIE;
*GDCPIE_PCT_NONE = *GD::Chartc::GDCPIE_PCT_NONE;
*GDCPIE_PCT_ABOVE = *GD::Chartc::GDCPIE_PCT_ABOVE;
*GDCPIE_PCT_BELOW = *GD::Chartc::GDCPIE_PCT_BELOW;
*GDCPIE_PCT_RIGHT = *GD::Chartc::GDCPIE_PCT_RIGHT;
*GDCPIE_PCT_LEFT = *GD::Chartc::GDCPIE_PCT_LEFT;
*GDC_GIF = *GD::Chartc::GDC_GIF;
*GDC_PNG = *GD::Chartc::GDC_PNG;
*GDC_WBMP = *GD::Chartc::GDC_WBMP;
*GDC_LINE = *GD::Chartc::GDC_LINE;
*GDC_AREA = *GD::Chartc::GDC_AREA;
*GDC_BAR = *GD::Chartc::GDC_BAR;
*GDC_FLOATINGBAR = *GD::Chartc::GDC_FLOATINGBAR;
*GDC_HILOCLOSE = *GD::Chartc::GDC_HILOCLOSE;
*GDC_COMBO_LINE_BAR = *GD::Chartc::GDC_COMBO_LINE_BAR;
*GDC_COMBO_HLC_BAR = *GD::Chartc::GDC_COMBO_HLC_BAR;
*GDC_COMBO_LINE_AREA = *GD::Chartc::GDC_COMBO_LINE_AREA;
*GDC_COMBO_LINE_LINE = *GD::Chartc::GDC_COMBO_LINE_LINE;
*GDC_COMBO_HLC_AREA = *GD::Chartc::GDC_COMBO_HLC_AREA;
*GDC_3DHILOCLOSE = *GD::Chartc::GDC_3DHILOCLOSE;
*GDC_3DCOMBO_LINE_BAR = *GD::Chartc::GDC_3DCOMBO_LINE_BAR;
*GDC_3DCOMBO_LINE_AREA = *GD::Chartc::GDC_3DCOMBO_LINE_AREA;
*GDC_3DCOMBO_LINE_LINE = *GD::Chartc::GDC_3DCOMBO_LINE_LINE;
*GDC_3DCOMBO_HLC_BAR = *GD::Chartc::GDC_3DCOMBO_HLC_BAR;
*GDC_3DCOMBO_HLC_AREA = *GD::Chartc::GDC_3DCOMBO_HLC_AREA;
*GDC_3DBAR = *GD::Chartc::GDC_3DBAR;
*GDC_3DFLOATINGBAR = *GD::Chartc::GDC_3DFLOATINGBAR;
*GDC_3DAREA = *GD::Chartc::GDC_3DAREA;
*GDC_3DLINE = *GD::Chartc::GDC_3DLINE;
*GDC_ytitle = *GD::Chartc::GDC_ytitle;
*GDC_xtitle = *GD::Chartc::GDC_xtitle;
*GDC_ytitle2 = *GD::Chartc::GDC_ytitle2;
*GDC_title = *GD::Chartc::GDC_title;
*GDC_title_size = *GD::Chartc::GDC_title_size;
*GDC_ytitle_size = *GD::Chartc::GDC_ytitle_size;
*GDC_xtitle_size = *GD::Chartc::GDC_xtitle_size;
*GDC_yaxisfont_size = *GD::Chartc::GDC_yaxisfont_size;
*GDC_xaxisfont_size = *GD::Chartc::GDC_xaxisfont_size;
*GDC_ylabel_fmt = *GD::Chartc::GDC_ylabel_fmt;
*GDC_ylabel2_fmt = *GD::Chartc::GDC_ylabel2_fmt;
*GDC_xlabel_ctl = *GD::Chartc::GDC_xlabel_ctl;
*GDC_xlabel_spacing = *GD::Chartc::GDC_xlabel_spacing;
*GDC_ylabel_density = *GD::Chartc::GDC_ylabel_density;
*GDC_interpolations = *GD::Chartc::GDC_interpolations;
*GDC_requested_ymin = *GD::Chartc::GDC_requested_ymin;
*GDC_requested_ymax = *GD::Chartc::GDC_requested_ymax;
*GDC_requested_yinterval = *GD::Chartc::GDC_requested_yinterval;
*GDC_0Shelf = *GD::Chartc::GDC_0Shelf;
*GDC_grid = *GD::Chartc::GDC_grid;
*GDC_ticks = *GD::Chartc::GDC_ticks;
*GDC_xaxis = *GD::Chartc::GDC_xaxis;
*GDC_yaxis = *GD::Chartc::GDC_yaxis;
*GDC_yaxis2 = *GD::Chartc::GDC_yaxis2;
*GDC_yval_style = *GD::Chartc::GDC_yval_style;
*GDC_stack_type = *GD::Chartc::GDC_stack_type;
*GDC_3d_depth = *GD::Chartc::GDC_3d_depth;
*GDC_3d_angle = *GD::Chartc::GDC_3d_angle;
*GDC_bar_width = *GD::Chartc::GDC_bar_width;
*GDC_HLC_style = *GD::Chartc::GDC_HLC_style;
*GDC_HLC_cap_width = *GD::Chartc::GDC_HLC_cap_width;
*GDC_annotation = *GD::Chartc::GDC_annotation;
*GDC_num_scatter_pts = *GD::Chartc::GDC_num_scatter_pts;
*GDC_scatter = *GD::Chartc::GDC_scatter;
*GDC_thumbnail = *GD::Chartc::GDC_thumbnail;
*GDC_thumblabel = *GD::Chartc::GDC_thumblabel;
*GDC_thumbval = *GD::Chartc::GDC_thumbval;
*GDC_border = *GD::Chartc::GDC_border;
*GDC_BGColor = *GD::Chartc::GDC_BGColor;
*GDC_GridColor = *GD::Chartc::GDC_GridColor;
*GDC_LineColor = *GD::Chartc::GDC_LineColor;
*GDC_PlotColor = *GD::Chartc::GDC_PlotColor;
*GDC_VolColor = *GD::Chartc::GDC_VolColor;
*GDC_TitleColor = *GD::Chartc::GDC_TitleColor;
*GDC_XTitleColor = *GD::Chartc::GDC_XTitleColor;
*GDC_YTitleColor = *GD::Chartc::GDC_YTitleColor;
*GDC_YTitle2Color = *GD::Chartc::GDC_YTitle2Color;
*GDC_XLabelColor = *GD::Chartc::GDC_XLabelColor;
*GDC_YLabelColor = *GD::Chartc::GDC_YLabelColor;
*GDC_YLabel2Color = *GD::Chartc::GDC_YLabel2Color;
*GDC_ExtVolColor = *GD::Chartc::GDC_ExtVolColor;
*GDC_SetColor = *GD::Chartc::GDC_SetColor;
*GDC_ExtColor = *GD::Chartc::GDC_ExtColor;
*GDC_transparent_bg = *GD::Chartc::GDC_transparent_bg;
*GDC_BGImage = *GD::Chartc::GDC_BGImage;
*GDC_hard_size = *GD::Chartc::GDC_hard_size;
*GDC_hard_xorig = *GD::Chartc::GDC_hard_xorig;
*GDC_hard_graphwidth = *GD::Chartc::GDC_hard_graphwidth;
*GDC_hard_yorig = *GD::Chartc::GDC_hard_yorig;
*GDC_hard_grapheight = *GD::Chartc::GDC_hard_grapheight;
*GDC_image_type = *GD::Chartc::GDC_image_type;
*GDC_generate_img = *GD::Chartc::GDC_generate_img;
*GDC_hold_img = *GD::Chartc::GDC_hold_img;
*GDC_image = *GD::Chartc::GDC_image;
*GDCPIE_BGColor = *GD::Chartc::GDCPIE_BGColor;
*GDCPIE_PlotColor = *GD::Chartc::GDCPIE_PlotColor;
*GDCPIE_LineColor = *GD::Chartc::GDCPIE_LineColor;
*GDCPIE_EdgeColor = *GD::Chartc::GDCPIE_EdgeColor;
*GDCPIE_other_threshold = *GD::Chartc::GDCPIE_other_threshold;
*GDCPIE_3d_angle = *GD::Chartc::GDCPIE_3d_angle;
*GDCPIE_3d_depth = *GD::Chartc::GDCPIE_3d_depth;
*GDCPIE_title = *GD::Chartc::GDCPIE_title;
*GDCPIE_title_size = *GD::Chartc::GDCPIE_title_size;
*GDCPIE_label_size = *GD::Chartc::GDCPIE_label_size;
*GDCPIE_label_dist = *GD::Chartc::GDCPIE_label_dist;
*GDCPIE_label_line = *GD::Chartc::GDCPIE_label_line;
*GDCPIE_explode = *GD::Chartc::GDCPIE_explode;
*GDCPIE_Color = *GD::Chartc::GDCPIE_Color;
*GDCPIE_missing = *GD::Chartc::GDCPIE_missing;
*GDCPIE_percent_labels = *GD::Chartc::GDCPIE_percent_labels;
*GDCPIE_percent_fmt = *GD::Chartc::GDCPIE_percent_fmt;
*GDC_xaxis_angle = *GD::Chartc::GDC_xaxis_angle;
*GDC_annotation_font_size = *GD::Chartc::GDC_annotation_font_size;
1;
